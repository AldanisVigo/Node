/*jshint node:true*/
/*global toString:true window:true*/
(function(){
  "use strict";

  var ErrorContainer = function(){
    this._errors = {};
    this._globalErrors = [];
  };

  ErrorContainer.prototype.add = function(fieldName, message){
    if(this._errors[fieldName]){
      this._errors[fieldName].push(message);
    }
    else{
      this._errors[fieldName] = [message];
    }
  };

  ErrorContainer.prototype.addGlobal = function(message){
    this._globalErrors.push(message);
  };

  ErrorContainer.prototype.errors = function(){
    return this._errors;
  };

  ErrorContainer.prototype.globalErrors = function(){
    return this._globalErrors;
  };

  ErrorContainer.prototype.clearErrors = function(){
    this._errors = {};
    this._globalErrors = [];
  };

  var ifUnlessSkip = function(validator, validation){
    if (validation.options) {
      if (validation.options['if'] && !validation.options['if'](validator)) {
        return true;
      }
      if (validation.options.unless && validation.options.unless(validator)) {
        return true;
      }
    }
    return false;
  };

  var allowBlank = function(validator, validation){
    if (validation.options){
      if (validation.options.allowBlank && !validator.get(validation.fieldName)){
        return true;
      }
    }
    return false;
  };

  var PresenceValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  PresenceValidator.prototype.validate = function(validator, done){
    if (!ifUnlessSkip(validator, this)) {
      if (!validator.get(this.fieldName)) {
        var err = this.fieldName + ' is required.';
        if (this.options.message) {
          err = this.options.message;
        }
        validator.addError(this.fieldName, err);
      }
    }
    done();
  };

  var NumericalityValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  NumericalityValidator.prototype.validate = function(validator, done){
    if (!ifUnlessSkip(validator, this)) {
      var value = String(validator.get(this.fieldName));
      var format = this.options.integer ? /^\-?\d+([eE]\d+)?$/ : /^\-(\.\d+)|(\d+\.?\d*)([eE]\d+)?$/;
      if (!value.match(format)) {
        validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is not a valid number.");
      } else {
        var number = Number(value);
        if (this.options.greaterThan && Number(this.options.greaterThan) >= number) {
          validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too small");
        }
        if (this.options.greaterThanOrEqualTo && Number(this.options.greaterThanOrEqualTo) > number) {
          validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too small");
        }
        if (this.options.lessThan && Number(this.options.lessThan) <= number) {
          validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too large");
        }
        if (this.options.lessThanOrEqualTo && Number(this.options.lessThanOrEqualTo) < number) {
          validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too large");
        }
      }
    }
    done();
  };

  var LengthValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  LengthValidator.prototype.validate = function(validator, done){
    if (!ifUnlessSkip(validator, this)) {
      var value = String(validator.get(this.fieldName));

      if (this.options.max && value.length > parseInt(this.options.max, 10)) {
        validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too long.");
      }
      if (this.options.min && value.length < parseInt(this.options.min, 10)) {
        validator.addError(this.fieldName, this.options.message || this.options.fieldName + " is too long.");
      }
    }
    done();
  };

  var FormatValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  FormatValidator.prototype.validate = function(validator, done){
    if (ifUnlessSkip(validator, this) || allowBlank(validator, this)) { done(); return; }
    if (!validator.get(this.fieldName).match(this.options['with'])) {
      var err = this.fieldName + ' is invalid.';
      if (this.options.message) {
        err = this.options.message;
      }
      validator.addError(this.fieldName, err);
    }
    done();
  };

  var InclusionValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  InclusionValidator.prototype.validate = function(validator, done) {
    if (ifUnlessSkip(validator, this) || allowBlank(validator, this)) { done(); return; }
    var needle = validator.get(this.fieldName);
    var hayStack = this.options['in'] || [];
    if (hayStack.indexOf(needle) === -1){
      var err = this.fieldName + ' is invalid.';
      if (this.options.message) {
        err = this.options.message;
      }
      validator.addError(this.fieldName, err);
    }
    done();
  };

  var ExclusionValidator = function(fieldName, options){
    this.fieldName = fieldName;
    this.options = options || {};
  };
  ExclusionValidator.prototype.validate = function(validator, done){
    if (ifUnlessSkip(validator, this) || allowBlank(validator, this)) { done(); return; }
    var needle = validator.get(this.fieldName);
    var hayStack = this.options['in'] || [];
    if (hayStack.indexOf(needle) !== -1){
      var err = this.fieldName + ' is invalid.';
      if (this.options.message) {
        err = this.options.message;
      }
      validator.addError(this.fieldName, err);
    }
    done();
  };

  var Yav = function(){
    this._validations = [];
    this._params = {};

    this._errorContainer = new ErrorContainer();
  };

  Yav.prototype.addError = function(fieldName, errStr){
    this._errorContainer.add(fieldName, errStr);
  };

  Yav.prototype.addGlobalError = function(errStr){
    this._errorContainer.addGlobal(errStr);
  };

  Yav.prototype.clearErrors = function(){
    this._errorContainer.clearErrors();
  };

  Yav.prototype.errors = function(){
    return this._errorContainer.errors();
  };

  Yav.prototype.globalErrors = function(){
    return this._errorContainer.globalErrors();
  };

  Yav.prototype.isValid = function(){
    return this.errors().length === 0 && this.globalErrors().length === 0;
  };

  Yav.prototype.validatePresence = function(fieldName, options){
    this._validations.push(new PresenceValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateNumericality = function(fieldName, options){
    this._validations.push(new NumericalityValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateLength = function(fieldName, options){
    this._validations.push(new LengthValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateFormat = function(fieldName, options){
    this._validations.push(new FormatValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateInclusion = function(fieldName, options){
    this._validations.push(new InclusionValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateExclusion = function(fieldName, options){
    this._validations.push(new ExclusionValidator(fieldName, options));
    return this;
  };

  Yav.prototype.validateCustom = function(customFn){
    this._validations.push({ validate: customFn });
    return this;
  };

  Yav.prototype.validate = function(callback) {
    var self = this;

    self.clearErrors();
    var totalValidations = self._validations.length;
    var validationsCompleted = 0;

    var runValidation = function() {
      validationsCompleted += 1;
      if (validationsCompleted >= totalValidations) {
        callback(self);
      }
    };
    for(var i=0; i<totalValidations; i+=1) {
      self._validations[i].validate(self, runValidation);
    }
    return self;
  };

  Yav.prototype.bind = function(params){
    this._params = params;
    return this;
  };

  Yav.prototype.get = function(key){
    if (toString.call(key) === '[object Array]') {
      var obj = this._params;
      for(var i=0; i<key.length; i+=1){
        if (obj[key[i]]) {
          obj = obj[key[i]];
        }
        else {
          return;
        }
      }
      return obj;
    }
    return this._params[key];
  };

  Yav.prototype.set = function(key, value){
    // TODO make set able to set deep values like get can access them
    this._params[key] = value;
    return this;
  };

  // export the Yav object to node or browser
  if (typeof window !== 'undefined'){
    window.Yav = Yav;
  }
  else if(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = Yav;
  }

}());
